show databases;

CREATE DATABASE Final_Project;
USE Final_Project;
SHOW TABLES;

CREATE TABLE Genre
(
    artist_mb varchar(255),
    country_mb varchar(255),
    tags_lastfm varchar(255),
    listeners_lastfm int,
    PRIMARY KEY (artist_mb)
 );

SELECT count(*)
FROM Genre;

CREATE TABLE Album_Info
(
    album_id varchar(255),
    album varchar(255),
    release_date varchar(255),
    PRIMARY KEY (album_id)
);
SELECT count(*)
FROM Album_Info;

CREATE TABLE Artists
(
    artist varchar(255),
    artist_id varchar(255),
    PRIMARY KEY (artist_id),
    FOREIGN KEY (artist) REFERENCES Genre(artist_mb)

);
SELECT count(*)
FROM Artists;

CREATE TABLE Songs
(
    id varchar(255),
    name_ varchar(255),
    album_id varchar(255),
    artist_id varchar(255),
    explicit boolean,
    danceability float,
    energy float,
    loudness float,
    duration_ms int,
    time_signature float,
    key_ int,
    mode_ int,
    speechiness float,
    acousticness float,
    instrumentalness float,
    liveness float,
    valence float,
    tempo float,
    PRIMARY KEY (id, artist_id),
    FOREIGN KEY (album_id) REFERENCES Album_Info(album_id)
);
SELECT count(*)
FROM Songs;

CREATE TABLE Charts
(
    title varchar(64),
    rank_ int,
    date_ varchar(64),
    artist varchar(255),
    url varchar(255),
    region varchar(255),
    chart varchar(255),
    trend varchar(255),
    PRIMARY KEY (title, date_, region, chart)
);
SELECT count(*)
FROM Charts;


# INDEXES:

CREATE INDEX album_id_name_date
ON Album_Info(album_id, album, release_date);

CREATE INDEX genre_artist_tags
ON Genre(artist_mb, tags_lastfm);

CREATE INDEX genre_country_artist_listeners
ON Genre(country_mb, artist_mb, listeners_lastfm);

CREATE INDEX genre_artist_country
ON Genre(artist_mb, country_mb);

CREATE INDEX genre_artist
ON Genre(artist_mb);

CREATE INDEX genre_country_tags
ON Genre(country_mb, tags_lastfm);

CREATE INDEX songs_album_artist
ON Songs (album_id);

CREATE INDEX songs_artist
ON Songs (artist_id);

CREATE INDEX songs_artist_dance
ON Songs (artist_id, danceability);

CREATE INDEX songs_artist_key_time
ON Songs (artist_id, key_, time_signature);

CREATE INDEX songs_all_attr
ON Songs (danceability, energy, speechiness, loudness, artist_id);

CREATE INDEX artists_all_attr
ON Artists (artist_id, artist);

CREATE INDEX chart_artists
ON Charts (artist);

CREATE INDEX chart_artists
ON Charts (artist);

CREATE INDEX chart_title_artist
ON Charts (title, artist);

CREATE INDEX chart_all_attr
ON Charts (title, date_, artist, region);

CREATE INDEX chart_all_but_title
ON Charts (date_, artist, region);

CREATE INDEX chart_date_region
ON Charts (date_, region);



#QUERIES:

# QUERY 1:
# For a word cloud, what tags are the most popular by country
WITH tags AS (
    SELECT country_mb, tags_lastfm, COUNT(tags_lastfm) as popularity
    FROM Genre USE INDEX (genre_country_tags)
    GROUP BY tags_lastfm, country_mb
    ORDER BY popularity DESC
)
SELECT *
FROM tags
GROUP BY country_mb;


# QUERY 2:
# Most popular artist from each country by number of listeners
WITH Popular_Artists_By_Country AS (
    SELECT Genre.country_mb, Genre.artist_mb, Genre.listeners_lastfm as num_listeners
    FROM Genre USE INDEX (genre_country_artist_listeners)
    GROUP BY country_mb, num_listeners
    ORDER BY num_listeners DESC
)
SELECT * FROM Popular_Artists_By_Country GROUP BY country_mb;


# QUERY 3:
# Finds the albums of the most popular artists, where popularity is measured by the number songs that ever made the top charts (HARD 1)
WITH filtered_albums AS (
    SELECT album, album_id, release_date
    FROM Album_Info USE INDEX (album_id_name_date)
    WHERE SUBSTR(Album_Info.release_date, 1, 4) = '2020' # We can pass the year in via our website implementation
),
filtered_charts AS (
    SELECT artist, title
    FROM Charts USE INDEX (chart_all_attr)
    WHERE region = 'United States' #User defined
),
Most_Popular_Artists AS (
    SELECT Artists.artist_id, Artists.artist, title, count(Artists.artist) as num
    FROM Artists JOIN filtered_charts C on Artists.artist = C.artist
    GROUP BY Artists.artist_id, C.title
)
SELECT DISTINCT artist, album, release_date
FROM filtered_albums JOIN Songs S USE INDEX (songs_album_artist) on filtered_albums.album_id = S.album_id
                     JOIN Most_Popular_Artists ON Most_Popular_Artists.artist_id = S.artist_id;



# QUERY 4:
# Given a dial, a user interacting with the website can find songs with desired attributed scores for danceability, energy, etc.
# Note: the ranges below are user determined, we hardcoded them for demonstration purposes
WITH filtered_songs AS (
    SELECT name_, artist_id, danceability, energy, speechiness, loudness
    FROM Songs USE INDEX (songs_all_attr)
    WHERE danceability > 0.2 AND danceability < 0.8 AND
      energy > 0.2 AND energy < 0.9 AND
      loudness > 0.2 AND loudness < 0.8 AND
      speechiness > 0.1 AND speechiness < 0.8
)
SELECT filtered_songs.name_, A.artist, danceability, energy, speechiness, loudness
FROM filtered_songs JOIN Artists A USE INDEX (artists_all_attr) on filtered_songs.artist_id = A.artist_id;


# QUERY 5:
# Find artists that are related to an inputted artist's genres
WITH Bruno_Mars_Genres AS (
    SELECT artist_mb, tags_lastfm
    FROM Genre USE INDEX (genre_artist_tags)
    WHERE artist_mb = 'Kanye'
)
SELECT Genre.artist_mb, Genre.tags_lastfm, listeners_lastfm
FROM Genre USE INDEX (genre_artist_tags), Bruno_Mars_Genres
WHERE Genre.tags_lastfm LIKE CONCAT('%', SUBSTRING_INDEX(Bruno_Mars_Genres.tags_lastfm, ';', 2), '%') AND
      Genre.artist_mb != Bruno_Mars_Genres.artist_mb
ORDER BY listeners_lastfm DESC;


# QUERY 6:
# Find songs that are related to a user inputted song (HARD 2)
# The following query will not be hardcoded in the React implementation
SELECT Songs.name_, Artists.artist
FROM Songs JOIN Artists ON Songs.artist_id = Artists.artist_id
WHERE Songs.name_ = 'Bohemian Rhapsody';

# Scenario: we are given a coldplay song
WITH Input_Song AS (
    SELECT Songs.name_, A.artist, Songs.artist_id
    FROM Songs JOIN Artists A on Songs.artist_id = A.artist_id
    WHERE Songs.name_ = 'Bohemian Rhapsody' AND A.artist LIKE '%Queen%'
    LIMIT 1
)
# Now, we found the input songs genre
, Input_Song_Genre AS (
    SELECT Genre.artist_mb, SUBSTRING_INDEX(tags_lastfm, ';', 2) as genre_tags
    FROM Genre JOIN Input_Song ON Genre.artist_mb = artist
    LIMIT 1
)

# Now we find artists that are of similar genre to above
, Similar_Artists AS (
    SELECT Genre.artist_mb, Genre.tags_lastfm, listeners_lastfm
    FROM Genre, Input_Song_Genre
    WHERE Genre.tags_lastfm LIKE CONCAT('%', Input_Song_Genre.genre_tags, '%') AND
      Genre.artist_mb != Input_Song_Genre.artist_mb
    ORDER BY listeners_lastfm DESC
    LIMIT 5 # this parameter can also be user determined
)

# Similar artist top chart songs
, Similar_Artists_Songs AS (
    SELECT title, artist, COUNT(title) as chart_freq
    FROM Charts JOIN Similar_Artists ON Charts.artist = Similar_Artists.artist_mb
    GROUP BY title, artist
    ORDER BY chart_freq DESC
)
SELECT * FROM Similar_Artists_Songs GROUP BY(artist);


# QUERY 7:
# Get the 5 most popular artists with some user inputted date and region.
SELECT artist, COUNT(artist) AS artist_freq
FROM Charts USE INDEX (chart_all_but_title)
WHERE SUBSTR(date_, 1, 4) = '2020' # User inputted
AND region = 'El Salvador'
GROUP BY artist
ORDER BY artist_freq DESC
LIMIT 5;


# QUERY 8:
# Find songs that are in the same key and time signature as a user inputted song
WITH Input_Song AS (
    SELECT Songs.artist_id, Songs.key_, Songs.time_signature
                        FROM Songs USE INDEX (songs_artist_key_time) JOIN Artists A on Songs.artist_id = A.artist_id
                        WHERE name_ = 'Bohemian Rhapsody' and A.artist LIKE '%Queen%'
                        LIMIT 1
)
SELECT DISTINCT Songs.name_, Artists.artist, Songs.key_, Songs.time_signature
FROM Songs USE INDEX (songs_artist_key_time) JOIN Artists ON Songs.artist_id = Artists.artist_id, Input_Song
WHERE Songs.key_ = Input_Song.key_ AND Songs.time_signature = Input_Song.time_signature
AND SUBSTR(Songs.name_, 1, 1) REGEXP '^[A-z]+$'
AND SUBSTR(Artists.artist, 1, 1) REGEXP '^[A-z]+$';


# QUERY 9:
# Given a user inputted song, first find songs of similar danceability and from artists of the same country.
# Then, find the average number of times these found songs appear in the same top chart (determined by region and chart name) (HARD 3)
# essentially find how popular a type of song is
WITH Input_Song AS (
    SELECT Songs.artist_id, A.artist, Songs.danceability, Songs.key_, Songs.time_signature
    FROM Songs USE INDEX (songs_artist_key_time) JOIN Artists A on Songs.artist_id = A.artist_id
    WHERE A.artist = 'Eminem' # user inputted
    LIMIT 1
),
Input_Song_Region AS (
    SELECT country_mb, Input_Song.danceability
    FROM Genre USE INDEX (genre_artist) JOIN Input_Song ON Genre.artist_mb = Input_Song.artist
),
Genre_By_country AS (
    SELECT artist_mb
    FROM Genre USE INDEX (genre_artist_country) JOIN Input_Song_Region ON Genre.country_mb = Input_Song_Region.country_mb
),
Songs_By_Danceability AS (
    SELECT name_ as name, artist_id
    FROM Songs USE INDEX (songs_artist_dance), Input_Song_Region
    WHERE Songs.danceability >= Input_Song_Region.danceability - 0.1# User defined similarity score
      AND Songs.danceability <= Input_Song_Region.danceability + 0.1
),
Songs_Same_Danceability_Region AS (
    SELECT DISTINCT name
    FROM Songs_By_Danceability
    JOIN Artists USE INDEX (artists_all_attr) ON Songs_By_Danceability.artist_id = Artists.artist_id JOIN Genre_By_country G on Artists.artist = G.artist_mb
),
Freq_Song_On_Chart AS (
    SELECT chart, region, title, COUNT(date_) as chart_appearances
    FROM Charts USE INDEX (chart_all_attr) JOIN Songs_Same_Danceability_Region ON Charts.title = Songs_Same_Danceability_Region.name
    GROUP BY title, chart, region
    ORDER BY chart_appearances DESC
)
SELECT chart, region, AVG(chart_appearances) as avg_appearances
FROM Freq_Song_On_Chart
GROUP BY chart, region
ORDER BY avg_appearances DESC;



# QUERY 10:
# Top 5 most successful albums in a given region and chart. Success is defined by the number of times songs from that particular album appear
# in top charts (HARD 4)

WITH song_count AS (
    SELECT title, artist, COUNT(date_) as chart_appearances
    FROM Charts USE INDEX (chart_all_attr)
    WHERE region = 'United States' AND chart = 'top200' #parameters to be defined by user
    GROUP BY title, artist
),
Album_year AS (
    SELECT album_id, album, release_date
    FROM Album_Info
    WHERE SUBSTR(release_date, 1, 4) = '2017'  #user inputted
),
Albums_Of_Chart_Songs AS (
    SELECT song_count.title, song_count.artist, album, release_date, song_count.chart_appearances
    FROM Album_year
    JOIN Songs S USE INDEX (songs_album_artist) ON Album_year.album_id = S.album_id
    JOIN Artists A USE INDEX (artists_all_attr) on S.artist_id = A.artist_id
    JOIN song_count on A.artist = song_count.artist AND S.name_ = song_count.title
),
Freq_Song_And_Album_On_Chart AS (
    SELECT album, artist, release_date, SUM(chart_appearances) as album_chart_appearances
    FROM Albums_Of_Chart_Songs
    GROUP BY album
)
SELECT * FROM Freq_Song_And_Album_On_Chart
ORDER BY album_chart_appearances DESC
LIMIT 5;



